/* adserver_endpoint.cc
   Eric Robert, 22 May 2013
   Copyright (c) 2013 Datacratic Inc.  All rights reserved.

   Tool to test a ad server endpoint.
*/

#include <boost/program_options/cmdline.hpp>
#include <boost/program_options/options_description.hpp>
#include <boost/program_options/positional_options.hpp>
#include <boost/program_options/parsers.hpp>
#include <boost/program_options/variables_map.hpp>

#include "rtbkit/plugins/adserver/standard_adserver_connector.h"
#include "rtbkit/plugins/data_logger/data_logger.h"
#include "soa/logger/file_output.h"

using namespace Datacratic;
using namespace RTBKIT;

int main(int argc, char * argv[])
{
    using namespace boost::program_options;

    std::string rotationInterval = "1h";
    int winsPort = 18142;
    int eventsPort = 18143;

    options_description endpoint_options("Ad Server request endpoint options");
    endpoint_options.add_options()
        ("rotation-interval,v", value<std::string>(&rotationInterval),
         "logs rotation interval")
        ("win-port,w", value<int>(&winsPort),
         "port for incoming wins")
        ("event-port,e", value<int>(&eventsPort),
         "port for incoming events");

    options_description all_opt;
    all_opt
        .add(endpoint_options);
    all_opt.add_options()
        ("help,h", "print this message");

    variables_map vm;
    store(command_line_parser(argc, argv)
          .options(all_opt)
          .run(),
          vm);
    notify(vm);

    if(vm.count("help")) {
        std::cerr << all_opt << std::endl;
        exit(1);
    }

    std::shared_ptr<ServiceProxies> proxies(new ServiceProxies());

    StandardAdServerConnector connector(proxies);
    connector.init(winsPort, eventsPort);
    connector.start();

    DataLogger logger("data_logger", proxies);
    logger.init();

    // Log the various error messages generated by our stack to the a log file.
    auto errorOutput = make_shared<RotatingFileOutput>();
    errorOutput->open("./logs/%F/errors-%F-%T.log", rotationInterval);
    logger.addOutput(errorOutput, boost::regex("ERROR"), boost::regex());

    // Log the events
    auto eventsOutput = make_shared<RotatingFileOutput>();
    eventsOutput->open("./logs/%F/events-%F-%T.log", rotationInterval);
    logger.addOutput(eventsOutput, boost::regex("WIN|CLICK|EXTERNALWIN"), boost::regex());

    logger.unsafeDisableMonitor();
    logger.connectAllServiceProviders("adServer", "logger");
    logger.start();

    for (;;) {
        sleep(10);
	proxies->events->dump(std::cerr);;
        connector.recordUptime();
    }
}
